# Makefile generated by Genmake for module main
MODULE:=main
BUILD:=debug
SRC:=Disassembler.cpp Config.cpp DiskInterface.cpp Media.cpp Debug.cpp \
    maincons.cpp EmulatorTester.cpp VirtualDrive.cpp BenchmarkObject.cpp GUI.cpp \
    DiskDrive.cpp TraceAllocations.cpp Emulator.cpp TraceItem.cpp audio/AY38910.cpp \
    audio/AudioDevice.cpp audio/AudioDummy.cpp audio/AudioMixer.cpp audio/MSXAudio.cpp \
    audio/PPISound.cpp audio/SCC.cpp audio/YM2413.cpp controls/Joystick.cpp \
    controls/Keyboard.cpp controls/Mouse.cpp cpu/Z80.cpp devices/DebugDevice.cpp \
    devices/F4Device.cpp devices/FT245.cpp devices/FT245UsbHost.cpp devices/I8255.cpp \
    devices/Kanji.cpp devices/RP5C01.cpp devices/SlotSelector.cpp devices/SwitchedPorts.cpp \
    memory/EmptyPage.cpp memory/Mapper.cpp memory/MapperFMPAC.cpp memory/MapperKonami4.cpp \
    memory/MapperKonami5.cpp memory/MapperMsxDos2.cpp memory/MemoryDevice.cpp \
    memory/RamBlock.cpp memory/RomBlock.cpp memory/UsbInterface.cpp memory/WD279X.cpp \
    osd/Command.cpp osd/Debugger.cpp osd/LogWatcher.cpp osd/MemoryMonitor.cpp \
    osd/OnScreenDisplay.cpp video/V9938.cpp video/V9938commands.cpp video/V9938renderer.cpp \
    video/V9938sprites.cpp

# assign various flags for the compiler, linker and assembler
CCFLAGS_debug:= 
CPPFLAGS_debug:= 
LDFLAGS_debug:= -lSDL -lSDL_ttf
ASFLAGS_debug:= 

# assign various flags for the compiler, linker and assembler
CCFLAGS_release:= 
CPPFLAGS_release:= 
LDFLAGS_release:= -lSDL -lSDL_ttf
ASFLAGS_release:= 
CPPFLAGS:=
INCS:=-I/usr/include/SDL -I. -Wall -W -Winline
LDFLAGS:=-lSDL -lSDL_ttf

# add extra compiler flags?
# CFLAGS +=
explain:
	@echo Use: make [option] where [option] can be one of:
	@echo ================================================


            
.DEFAULT_GOAL :=info
            
# determine the object files taking all .c files from SRC and replace 
# all .c/.cpp extentions by .o do the same for all .s files
OBJS := $(patsubst %.c,%.o, $(filter %.c,$(SRC))) 
OBJS += $(patsubst %.cpp,%.o, $(filter %.cpp,$(SRC))) 
OBJS += $(patsubst %.s,%.o, $(filter %.s,$(SRC))) 

ifeq (1,1)
 TVAR :=$(MAKEFLAGS)
else
 TVAR :=nee
endif

# insert "obj_dbg/" or "obj_rel/" in the path of all objects
BUILDOBJS := $(patsubst src/%,$(BUILD)/%, $(OBJS))

# determine the names for dependancy (.d) files 
DEPS := $(patsubst src/%,$(BUILD)/%, $(patsubst %.c,%.d, $(filter %.c,$(SRC))))

# include dependancy files
include $(DEPS)

$(MODULE).a: $(BUILDOBJS)
#	@echo Link the object to into one library: $@
	ar $@ $^
	@objdump -D --section=.text $@ >$@_text_dump.txt
	@objdump -D --section=.data $@ >$@_data_dump.txt
	@objdump -D --section=.rodata $@ >$@_rodata_dump.txt

# basic build rule for .c files
# $* is the "stem", the part of the rule that matched the % in the pattern
# $@ is the requested target
$(BUILD)/%.o: src/%.c
	@echo =======================BUILDING=======================================
	@if exist $@ @echo Rebuilding: $@ (because $? changed)
	@if not exist $@ @echo Rebuilding: $@ (did not exist) 
	@if not exist $(BUILD)/. mkdir $(BUILD)
	gcc $(CFLAGS) -o $@ -c src/$*.c $(INCS)

#basically the same rule for c++
#with an ugly hack to make it "just work (tm)"
%.o: %.cpp
	@echo =======================BUILDING=======================================
	@if [ -e $@ ]; then echo Rebuilding: $@ \(because $? changed\);     else echo Rebuilding: $@ \(did not exist\); fi
    
#    if [ ! -e $(BUILD)/. ]; then mkdir $(BUILD); fi
	g++ $(CPPFLAGS) -o $@ -c $*.cpp $(INCS)

# basic build rule for .s files
$(BUILD)/%.o: src/%.s
	@if exist $@ @echo Rebuilding: $@ (because $? changed)
	@if not exist $@ @echo Rebuilding: $@ (does not exist) 
	@if not exist $(BUILD)/. mkdir $(BUILD)
	as -o $@ $(INCS) src/$*.s 

DEPSRC = $(subst $(BUILD),src,$(@:.d=.c))
DEPDOS = $(subst /,\,$@)

# generic .d dependancy, will be overruled by seporate .d files once they exist
# in the .d files itself does not exist, in will just depend on the .c files
$(BUILD)/%.d: src/%.c
#	@echo =====================================================================
	@if exist $@ @echo Recalculating: $@ (because $? changed)
	@if not exist $@ @echo Recalculating: $@ (did not exist) 
	@if not exist $(BUILD)/. mkdir $(BUILD)
	@echo $@ $(@:.d=.o) \>$(DEPDOS).tmp
	gcc $(INCS) $(DEFINES) -MM -MG $(DEPSRC) >>$(DEPDOS).tmp
# if we get here, the previous command did not cause an error
# and we can savely put the dependancy file into place	
	@copy $(DEPDOS).tmp $(DEPDOS) >NUL
	@del $(DEPDOS).tmp

# this doesn't work right yet... (dependancies for .s files are not calculated right)
# this will not cause problems most of the time, but changes in .s files included
# by .s files will not cause the corresponding object file to be rebuild.
#$(BUILD)/%.d: src/%.s
#	@echo Recalculating $@
#	@gendep.py $*.s > $@

clean: 
	-del *.o *.d *.a *.save /s

info:
	@echo SRC = $(SRC)
	@echo DEPS = $(DEPS)
	@echo MODULE = $(MODULE).a
	@echo rTVAR = $(TVAR)
	@echo VARIABLES = "$(.VARIABLES)"
	@echo bla

# start of build 'debug'
debug: $(OBJS)
	@echo Dit is een debug build
	@echo I rely on $(DEPS)

	@echo I should now have $(OBJS)
	g++ -o a.out $(OBJS) $(LDFLAGS)

# start of build 'release'
release: $(OBJS)
	@echo Dit is een release build
	@echo I rely on $(DEPS)

	@echo I should now have $(OBJS)
	g++ -o a.out $(OBJS) $(LDFLAGS)

